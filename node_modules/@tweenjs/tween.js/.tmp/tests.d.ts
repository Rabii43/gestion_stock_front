export declare const tests: {
    hello(test: Test): void;
    'TWEEN.getAll'(test: Test): void;
    'TWEEN object stores tweens automatically on start'(test: Test): void;
    'TWEEN.removeAll()'(test: Test): void;
    'TWEEN.add()'(test: Test): void;
    'TWEEN.remove()'(test: Test): void;
    'TWEEN.update() returns false when done (no tweens to animate)'(test: Test): void;
    'TWEEN.update() returns true when there are active tweens'(test: Test): void;
    'TWEEN.update() removes tweens when they are finished'(test: Test): void;
    'TWEEN.update() does not remove tweens when they are finished with preserve flag'(test: Test): void;
    'Unremoved tweens which have been updated past their finish time may go backward in time'(test: Test): void;
    constructor(test: Test): void;
    'Return the same tween instance for method chaining'(test: Test): void;
    'Tween existing property'(test: Test): void;
    'Tween non-existing property'(test: Test): void;
    'Tween non-null property'(test: Test): void;
    'Tween function property'(test: Test): void;
    'Tween boolean property'(test: Test): void;
    'Tween null property'(test: Test): void;
    'Tween undefined property'(test: Test): void;
    'Tween relative positive value'(test: Test): void;
    'Tween relative negative value'(test: Test): void;
    'String values without a + or - sign should not be interpreted as relative'(test: Test): void;
    'Tween relative positive value, with yoyo'(test: Test): void;
    'Tween relative negative value, with yoyo'(test: Test): void;
    'Tween relative positive array interpolation values'(test: Test): void;
    'String values without a + or - sign should not be interpreted as relative with array interpolation values'(test: Test): void;
    'animate values in an array'(test: Test): void;
    'animate values in a nested array'(test: Test): void;
    'Test TWEEN.Tween.start()'(test: Test): void;
    'Ensure tweens start without calling start() method.'(test: Test): void;
    'Test Tween.to() tweening towards a dynamic object'(test: Test): void;
    'Test TWEEN.Tween.stop()'(test: Test): void;
    'Test TWEEN.Tween.delay()'(test: Test): void;
    'Test TWEEN.Tween.easing()'(test: Test): void;
    'Test TWEEN.Tween.chain --with one tween'(test: Test): void;
    'Test TWEEN.Tween.chain --with several tweens in an array'(test: Test): void;
    'Test TWEEN.Tween.chain allows endless loops'(test: Test): void;
    'Test TWEEN.Tween.onStart'(test: Test): void;
    'Test TWEEN.Tween.onStop'(test: Test): void;
    'Test TWEEN.Tween.onUpdate'(test: Test): void;
    'Test TWEEN.Tween.onComplete'(test: Test): void;
    'TWEEN.Tween does not repeat by default'(test: Test): void;
    'Test single repeat happens only once'(test: Test): void;
    'Test Infinity repeat happens forever'(test: Test): void;
    'Test tweening relatively with repeat'(test: Test): void;
    'Test yoyo with repeat Infinity happens forever'(test: Test): void;
    'Test yoyo with repeat 1 happens once'(test: Test): void;
    'Test yoyo works with arrays'(test: Test): void;
    'Test yoyo can be stopped and restarted properly'(test: Test): void;
    'Test TWEEN.Tween.stopChainedTweens()'(test: Test): void;
    'Test TWEEN.Tween.chain progressess into chained tweens'(test: Test): void;
    'Test that TWEEN.Tween.end sets the final values.'(test: Test): void;
    'Test that TWEEN.Tween.end calls the onComplete callback of the tween.'(test: Test): void;
    'Ensure Tween.end() works after stopping a tween.'(test: Test): void;
    'Test delay adds delay before each repeat'(test: Test): void;
    'Test repeatDelay adds delay before each repeat'(test: Test): void;
    'Test repeatDelay and delay can be used together'(test: Test): void;
    'Tween.js compatible with Object.defineProperty getter / setters'(test: Test): void;
    'tween.isPlaying() is false before the tween starts'(test: Test): void;
    'tween.isPlaying() is true when a tween is started and before it ends'(test: Test): void;
    'tween.isPlaying() is false after a tween ends'(test: Test): void;
    'A zero-duration tween finishes at its starting time without an error.'(test: Test): void;
    'Custom group.getAll()'(test: Test): void;
    'Custom group stores tweens instead of global TWEEN group'(test: Test): void;
    "Custom group.removeAll() doesn't conflict with global TWEEN group"(test: Test): void;
    "Global TWEEN.removeAll() doesn't conflict with custom group"(test: Test): void;
    "Custom group.add() doesn't conflict with global TWEEN group, or vice versa"(test: Test): void;
    "Custom group.update() doesn't conflict with global TWEEN group"(test: Test): void;
    "Global TWEEN.update() doesn't conflict with custom group"(test: Test): void;
    'Ensure tweens work without any group'(test: Test): void;
    'Stopping a tween within an update callback will not cause an error.'(test: Test): void;
    'Set the duration with .duration'(test: Test): void;
    "Tween.group sets the tween's group."(test: Test): void;
    'Test TWEEN.Tween.pause() and TWEEN.Tween.resume()'(test: Test): void;
    'Test TWEEN.Tween.pause() and TWEEN.Tween.resume(), without groups'(test: Test): void;
    'Arrays in the object passed to to() are not modified by start().'(test: Test): void;
    'Tween.js animate nested object'(test: Test): void;
    'Tween.js animate nested object including relative value'(test: Test): void;
    'Test TWEEN.Tween with nested objects'(test: Test): void;
    'Test TWEEN.Tween.pause() and .resume() with nested objects'(test: Test): void;
};
declare type Test = {
    ok(a: unknown, failMessage?: string): void;
    equal(a: unknown, b: unknown, failMessage?: string): void;
    deepEqual(a: unknown, b: unknown, failMessage?: string): void;
    expect(n: number): void;
    done(): void;
};
export {};
